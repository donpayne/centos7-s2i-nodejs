#!/bin/bash

# Prevent running assemble in builders different than official STI image.
# The official nodejs:0.10-onbuild already run npm install and use different
# application folder.
[ -d "/usr/src/app" ] && exit 0

set -e

# FIXME: Linking of global modules is disabled for now as it causes npm failures
#        under RHEL7
# Global modules good to have
# npmgl=$(grep "^\s*[^#\s]" ../etc/npm_global_module_list | sort -u)
# Available global modules; only match top-level npm packages
#global_modules=$(npm ls -g 2> /dev/null | perl -ne 'print "$1\n" if /^\S+\s(\S+)\@[\d\.-]+/' | sort -u)
# List all modules in common
#module_list=$(/usr/bin/comm -12 <(echo "${global_modules}") | tr '\n' ' ')
# Link the modules
#npm link $module_list

install_application_source() {
	echo "---> Installing application source..."
	cp -Rf /tmp/src/. ./
}

install_npm_dependencies() {
	echo "---> Installing npm dependencies..."
	npm install
}

restore_build_artifacts() {
	if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
		echo "---> Restoring build artifacts..."
		mv /tmp/artifacts/* ./
	fi
}

set_npm_config() {
	if [ ! -z $2 ]; then
		echo "---> Setting npm $1 to $2"
		npm config set $1 $2
	fi
}

main() {
	set_npm_config "proxy" $http_proxy
	set_npm_config "proxy" $HTTP_PROXY
	set_npm_config "https-proxy" $https_proxy
	set_npm_config "https-proxy" $HTTPS_PROXY
	set_npm_config "registry" $NPM_MIRROR

	install_application_source
	restore_build_artifacts
	install_npm_dependencies
)

main

# Fix source directory permissions
# fix-permissions ./
# Allow this script to fail without failing a build
# set +e

# Fix permissions on the given directory to allow group read/write of
# regular files and execute of directories.
# chgrp -R 0 .;
# find -L . -xtype l -exec chgrp 0 {} \;
# chmod -R g+rw .;
# find -L . -xtype l -exec chmod g+rw {} \;
# find . -type d -exec chmod g+x {} +